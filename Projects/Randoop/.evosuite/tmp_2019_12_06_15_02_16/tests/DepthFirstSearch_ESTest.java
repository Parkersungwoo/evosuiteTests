/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 21:07:18 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DepthFirstSearch_ESTest extends DepthFirstSearch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      DepthFirstSearch.Node depthFirstSearch_Node1 = new DepthFirstSearch.Node(1359);
      List<DepthFirstSearch.Node> list0 = depthFirstSearch_Node0.neighbours;
      depthFirstSearch_Node1.setNeighbours(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      // Undeclared exception!
      try { 
        depthFirstSearch0.dfsUsingStack((DepthFirstSearch.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DepthFirstSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      DepthFirstSearch.Node depthFirstSearch_Node1 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours(depthFirstSearch_Node1);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfsUsingStack(depthFirstSearch_Node0);
      assertNotSame(depthFirstSearch_Node0, depthFirstSearch_Node1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours(depthFirstSearch_Node0);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfsUsingStack(depthFirstSearch_Node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours((DepthFirstSearch.Node) null);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfsUsingStack(depthFirstSearch_Node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      DepthFirstSearch.Node depthFirstSearch_Node1 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours(depthFirstSearch_Node1);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfs(depthFirstSearch_Node0);
      assertNotSame(depthFirstSearch_Node0, depthFirstSearch_Node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours(depthFirstSearch_Node0);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfs(depthFirstSearch_Node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      depthFirstSearch_Node0.addneighbours((DepthFirstSearch.Node) null);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfs(depthFirstSearch_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(1359);
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      depthFirstSearch0.dfs(depthFirstSearch_Node0);
      depthFirstSearch0.dfsUsingStack(depthFirstSearch_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DepthFirstSearch depthFirstSearch0 = new DepthFirstSearch();
      // Undeclared exception!
      try { 
        depthFirstSearch0.dfs((DepthFirstSearch.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DepthFirstSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DepthFirstSearch.Node depthFirstSearch_Node0 = new DepthFirstSearch.Node(0);
      List<DepthFirstSearch.Node> list0 = depthFirstSearch_Node0.getNeighbours();
      depthFirstSearch_Node0.setNeighbours(list0);
      assertFalse(list0.contains(depthFirstSearch_Node0));
  }
}
