/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:10:23 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AddTwoIntegers_ESTest extends AddTwoIntegers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = AddTwoIntegers.wacky("{}Q@a\"u");
      assertEquals("{}Q@E\"U", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = AddTwoIntegers.wacky("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = AddTwoIntegers.subtract(542, 0);
      assertEquals(542, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = AddTwoIntegers.subtract((-2875), 1);
      assertEquals((-2876), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = AddTwoIntegers.substring("ZsC><$@}[Z'w", 10);
      assertEquals("ZsC><$@}[Z", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = AddTwoIntegers.substring(":djR)iP8,2VO*$w", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = AddTwoIntegers.multiply(0, (-1703));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = AddTwoIntegers.multiply(1, (-1883));
      assertEquals((-1883), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = AddTwoIntegers.add(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = AddTwoIntegers.add((-1), (-1));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AddTwoIntegers.wacky((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AddTwoIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AddTwoIntegers.substring((String) null, 2037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AddTwoIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = AddTwoIntegers.add(10, 10);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = AddTwoIntegers.multiply((-1820), (-1820));
      assertEquals(3312400, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        AddTwoIntegers.substring("\"X>OZ", (-1820));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = AddTwoIntegers.subtract((-780), (-780));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AddTwoIntegers.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AddTwoIntegers addTwoIntegers0 = new AddTwoIntegers();
  }
}
