/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:34:42 GMT 2019
 */

package guessnumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import guessnumber.UserNumberBean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.FalsePositiveException;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserNumberBean_ESTest extends UserNumberBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer((-2118));
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      Integer integer1 = new Integer(2124);
      userNumberBean0.setUserNumber(integer1);
      userNumberBean0.getUserNumber();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between -2118 and -2118.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(3227);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Integer integer1 = new Integer(0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer1);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.setUserNumber(integer1);
      userNumberBean0.getUserNumber();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 0 and 3227.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer((-3318));
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.setUserNumber(integer0);
      userNumberBean0.getUserNumber();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between -3318 and -3318.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer((-567));
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.setUserNumber(integer0);
      userNumberBean0.getUserNumber();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between -567 and -567.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      userNumberBean0.getMinimum();
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) null);
      try { 
        Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
        fail("Expecting exception: FalsePositiveException");
      
      } catch(FalsePositiveException e) {
         //
         // Missing dependency injection for field minimum in class guessnumber.UserNumberBean
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer((-1948));
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMinimum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between -1948 and -1948.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(3227);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Integer integer1 = new Integer(0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer1);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMinimum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 0 and 3227.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Integer integer1 = new Integer(27);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer1);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMinimum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 27 and 2721.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = userNumberBean0.getMaximum();
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) null);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      try { 
        Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
        fail("Expecting exception: FalsePositiveException");
      
      } catch(FalsePositiveException e) {
         //
         // Missing dependency injection for field maximum in class guessnumber.UserNumberBean
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer((-2118));
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMaximum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between -2118 and -2118.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMaximum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 0 and 0.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(3227);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMaximum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 3227 and 3227.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      userNumberBean0.getGreeting();
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 0 and 0.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(712);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      // Undeclared exception!
      try { 
        userNumberBean0.getResponse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("guessnumber.UserNumberBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      Integer integer1 = new Integer(7);
      userNumberBean0.setUserNumber(integer1);
      String string0 = userNumberBean0.getResponse();
      assertEquals("Sorry, 7 is incorrect.  Try a larger number.", string0);
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 2721 and 2721.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Integer integer1 = new Integer(27);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer1);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.setUserNumber(integer0);
      String string0 = userNumberBean0.getResponse();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 27 and 2721.  Can you guess it?", userNumberBean0.getGreeting());
      assertEquals("Sorry, 2,721 is incorrect. Try a smaller number.", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      String string0 = userNumberBean0.getGreeting();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 2721 and 2721.  Can you guess it?", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(39);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMaximum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 39 and 39.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getMinimum();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 2721 and 2721.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(39);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.getUserNumber();
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 39 and 39.  Can you guess it?", userNumberBean0.getGreeting());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserNumberBean userNumberBean0 = new UserNumberBean();
      Integer integer0 = new Integer(2721);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "maximum", (Object) integer0);
      Injector.inject(userNumberBean0, (Class<?>) UserNumberBean.class, "minimum", (Object) integer0);
      Injector.validateBean(userNumberBean0, (Class<?>) UserNumberBean.class);
      Injector.executePostConstruct((Object) userNumberBean0, (Class<?>) UserNumberBean.class);
      userNumberBean0.setUserNumber(integer0);
      String string0 = userNumberBean0.getResponse();
      assertEquals("Yay! You got it!", string0);
      assertEquals("Hi!  My name is Duke.  I'm thinking of a number between 2721 and 2721.  Can you guess it?", userNumberBean0.getGreeting());
  }
}
